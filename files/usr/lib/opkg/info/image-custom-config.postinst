#!/usr/bin/env bash
set -ueo pipefail
/usr/bin/env printf "\n\n----- build environment by env: -----"
/usr/bin/env
/usr/bin/env printf "\n\n----- starting configuration: -----\n:"
# shellcheck disable=1091
source "etc/secrets.sh"
rm -fv "etc/secrets.sh"

# shell:
/usr/bin/env sed -i -E 's#(root\:.+\:).+#\1/bin/bash#' etc/passwd

# password:
/usr/bin/env sed -i -E "s#(root\:)[^:]*(\:.+)#\1$(
  echo "${WRT_ROOT_PASSWD}" |
    /usr/bin/openssl passwd -6 -stdin
)\2#" etc/shadow

# crontab:
/usr/bin/env cat <<EOF >>etc/crontabs/root
*/20 * * * * /usr/bin/msmtpq --q-mgmt -r
59 23 * * * /etc/init.d/atop restart
EOF

# move distinct configs if exists:
[[ "${WRT_CO_SUFFIX}" = 'none' ]] || {
  for config in 'etc/config/wireless' 'etc/config/network'; do
    [[ -e "${config}-${WRT_CO_SUFFIX}" ]] &&
      /usr/bin/env mv -vf "${config}-${WRT_CO_SUFFIX}" "${config}"
  done
}

# replace placeholders:
/usr/bin/env sed -i \
  "
		s/192.168.69/${WRT_LAN3OCT}/g ;
		s/REPLACE_device_mac_REPLACE/${WRT_DEVICE_MAC}/g ;
    s/REPLACE_hostname_REPLACE/${WRT_HOSTNAME}/g ;
    s/REPLACE_SMTP_host_REPLACE/${WRT_SMTP_HOST}/g ;
    s/REPLACE_SMTP_login_REPLACE/${WRT_SMTP_LOGIN}/g ;
    s/REPLACE_SMTP_passwd_REPLACE/${WRT_SMTP_PASSWD}/g ;
    s/REPLACE_secret_tld_REPLACE/${WRT_SECRET_TLD}/g ;
    s/REPLACE_authelia_jwt_secret_REPLACE/${WRT_AUTHELIA_JWT}/g ;
    s/REPLACE_insecure_session_secret_REPLACE/${WRT_AUTHELIA_SES}/g ;
    s/REPLACE_encryption_key_REPLACE/${WRT_AUTHELIA_DBKEY}/g ;
    s#REPLACE_couch_uri_REPLACE#${WRT_COUCH_URI}#g ;
    s#ReplaceAutheliaUriSecretReplace#${WRT_AUTHELIA_URI}#g ;
    s/REPLACE_luci_sta_REPLACE/${WRT_LUCI_STA}/g ;
    s/REPLACE_luci_cgi_REPLACE/${WRT_LUCI_CGI}/g ;
    s/REPLACE_uri_3x_ui_REPLACE/${WRT_URI_3X_UI}/g ;
    s/REPLACE_clofa_to_REPLACE/${WRT_CLOFA_TO}/g ;
    s/REPLACE_clofa_zo_REPLACE/${WRT_CLOFA_ZO}/g ;
    s/REPLACE_wifi_ssid_REPLACE/${WRT_WIFI_SSID}/g ;
    s/REPLACE_wifi_key_REPLACE/${WRT_WIFI_KEY}/g ;
  " \
  'etc/fail2ban/filter.d/'*.local \
  'etc/config/luci_statistics' \
  'etc/dnsmasq.d/addrs.conf' \
  'etc/haproxy/haproxy.cfg' \
  'etc/dnsmasq.d/m.sets' \
  'etc/config/wireless' \
  'etc/config/network' \
  'etc/config/system' \
  'etc/config/uhttpd' \
  'etc/config/dhcp' \
  'etc/config/luci' \
  'etc/config/acme' \
  'etc/config/ddns' \
  'etc/msmtprc' \
  'etc/authelia.yaml'

# add hotplug debug log:
# shellcheck disable=2016
/usr/bin/env find etc/hotplug.d etc/udhcpc.user.d \
  -mindepth 0 -maxdepth 1 -type d -exec bash -c '
etype="$(basename $1)"
[[ "${etype}" == "udhcpc.user.d" ]] && etype='\''udhcpc'\''
echo printenv to [${etype}]
cat > "$1/000-printenv.sh" <<EOF
#!/usr/bin/env bash
etype='\''${etype}'\''
#/usr/bin/env logger -t "hotplug.\${etype}" "cmdline: [\$0 \$@]"
#/usr/bin/env | /usr/bin/env logger -t "hotplug.\${etype}"
exit 0
EOF
chmod +x "$1/000-printenv.sh"
' _ {} \;

# authorized keys:
/usr/bin/env cp -v root/.ssh/authorized_keys etc/dropbear/authorized_keys
/usr/bin/env cp -v root/.terminfo/x/xterm-256color usr/share/terminfo/x/xterm-256color

# msmtp(q) preparation:
/usr/bin/env ln -vsf /root/log log
/usr/bin/env ln -vsf /root/.msmtp.queue .msmtp.queue
/usr/bin/env ln -vsf /usr/bin/msmtpq usr/sbin/sendmail
/usr/bin/env ln -vsf /dev/null sent
/usr/bin/env ln -vsf /dev/null root/sent

# patches:
for f in patches/*.diff; do
  patch -p0 <"${f}"
done
/usr/bin/env rm -rfv patches
/usr/bin/env cat etc/ssl/private/main.crt \
  etc/ssl/private/main.key >etc/ssl/private/main.pem

# port forwarding:
[[ ${WRT_PORT_FORWARD:-"null"} == 'null' ]] && WRT_PORT_FORWARD=''
# shellcheck disable=2086
IFS=',' read -ra array <<<"$(echo -n ${WRT_PORT_FORWARD})"
for c in "${array[@]}"; do
  name="${c%@*}"
  name="${name#"${name%%[![:space:]]*}"}"
  name="${name%"${name##*[![:space:]]}"}"
  ident="${name//[^a-zA-Z0-9_]/_}"
  temp="${c#*@}"
  ports="${temp%#*}"
  ports="${ports#"${ports%%[![:space:]]*}"}"
  ports="${ports%"${ports##*[![:space:]]}"}"
  num="${c##*#}"
  num="${num#"${num%%[![:space:]]*}"}"
  num="${num%"${num##*[![:space:]]}"}"
  echo "name: [${name}], ports: [${ports}], num: [${num}]"
  /usr/bin/env cat <<EOF >>etc/config/firewall

config redirect '${ident}'
	option dest 'lan'
	option target 'DNAT'
	option name '${name}'
	option src 'wan'
	option src_dport '${ports}'
	option dest_ip '${WRT_LAN3OCT}.${num}'
	option dest_port '${ports}'
	option family 'ipv4'
EOF
done

# dokodemo warp:
warp_reg='/usr/bin/warp-reg'
/usr/bin/env curl -Lm 111 -o "${warp_reg}" \
  https://github.com/badafans/warp-reg/releases/download/v1.0/main-linux-amd64
/usr/bin/env chmod -v 755 "${warp_reg}"
reg_data="$(${warp_reg})"
pvk="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="private_key:") print $2 }'
)"
ipv4="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="v4:") print $2 }'
)"
ipv6="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="v6:") print $2 }'
)"
[[ -z "${pvk}" ]] && {

  echo 'warp-reg failedâ€¦ falling back to WRT_WARP_REG env:'
  # shellcheck disable=2016
  ipv4="$(
    echo "${WRT_WARP_REG}" |
      /usr/bin/env awk -F , '{ print $1 }'
  )"
  # shellcheck disable=2016
  ipv6="$(
    echo "${WRT_WARP_REG}" |
      /usr/bin/env awk -F , '{ print $2 }'
  )"
  # shellcheck disable=2016
  pvk="$(
    echo "${WRT_WARP_REG}" |
      /usr/bin/env awk -F , '{ print $3 }'
  )"
}
echo "ips v4[${ipv4}] v6[${ipv6}] generated"
  /usr/bin/env cat <<EOF >>etc/config/firewall

config zone 'zone_ext'
	option name 'ext'
	option input 'DROP'
	option output 'ACCEPT'
	option forward 'DROP'
	option masq '1'
	option masq6 '1'
	option mtu_fix '1'
	list network 'tun2ray'
	list network 'prskt'
	list network 'wan4'
	list network 'wan6'
EOF
for r in ${WRT_WARP_REGIONS}; do
  /usr/bin/env cat <<EOF >>etc/config/firewall
	list network 'wgcf${r}'
EOF
done
count=0
amount=$(echo "${WRT_WARP_REGIONS}" | /usr/bin/env tr ' ' '\n' | /usr/bin/env wc -l)
[[ ${WRT_OTHER_ROUTES:-"null"} == 'null' ]] && WRT_OTHER_ROUTES=''
for r in ${WRT_WARP_REGIONS} ${WRT_OTHER_ROUTES}; do
  count=$((count + 1))
  mtu='1300'
  [[ "$r" == "m" ]] && count=0 && mtu='1420'
  [[ -e "etc/nftsets/vpn4_${r}.txt" ]] ||
    /usr/bin/env cat <<EOF >>"etc/nftsets/vpn4_${r}.txt"
# address blocks for [${r}] vpn region
EOF
  [[ -e "etc/nftsets/vpn6_${r}.txt" ]] ||
    /usr/bin/env cat <<EOF >>"etc/nftsets/vpn6_${r}.txt"
# address blocks for [${r}] vpn region
EOF
  port="$(/usr/bin/env printf '%03d' "$count")"
  mark="$(/usr/bin/env printf '%02d' "$count")"
  [[ ${count} -lt ${amount} ]] && {
    /usr/bin/env cat <<EOF >>etc/config/network

config interface 'wgcf${r}'
	option proto 'wireguard'
	option private_key '${pvk}'
	list addresses '${ipv4}/32'
	list addresses '${ipv6}/128'
	option listen_port '12${port}'
	option mtu '${mtu}'

config wireguard_wgcf${r} 'wgserver${r}'
	option description 'warp-${r}'
	option public_key 'bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo='
	option endpoint_host '127.0.0.1'
	option endpoint_port '11${port}'
	option persistent_keepalive '11'
	option route_allowed_ips '0'
	list allowed_ips '0.0.0.0/0'
	list allowed_ips '::/0'
EOF
  }
  /usr/bin/env cat <<EOF >>etc/config/network

config rule 'wgcf4ru_${r}'
	option name 'mark-${r}'
	option mark '0x1${mark}'
	option priority '100'
	option lookup 'vpn_${r}'

config route 'wgcf4ro_${r}'
	option name 'wgcf-${r}'
	option interface 'wgcf${r}'
	option table 'vpn_${r}'
	option target '0.0.0.0/0'

config rule6 'wgcf6ru_${r}'
	option name 'mark-${r}'
	option mark '0x1${mark}'
	option priority '100'
	option lookup 'vpn_${r}'

config route6 'wgcf6ro_${r}'
	option name 'wgcf-${r}'
	option interface 'wgcf${r}'
	option table 'vpn_${r}'
	option target '::/0'
EOF
  /usr/bin/env cat <<EOF >>etc/config/firewall

config ipset 'vpn4_${r}'
	option name 'vpn4_${r}'
	option family 'ipv4'
	list match 'dst_net'
	option loadfile '/etc/nftsets/vpn4_${r}.txt'

config ipset 'vpn6_${r}'
	option name 'vpn6_${r}'
	option family 'ipv6'
	list match 'dst_net'
	option loadfile '/etc/nftsets/vpn6_${r}.txt'

config rule 'mark4_lan_${r}'
	option name 'mark4_lan_${r}'
	option src 'lan'
	option dest '*'
	option ipset 'vpn4_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_lan_${r}'
	option name 'mark6_lan_${r}'
	option src 'lan'
	option dest '*'
	option ipset 'vpn6_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'

# rule disabled due detouring the whole cloudflare in vpn4_m.txt
# to keep router available for cloudflare proxy incoming requests
# config rule 'mark4_int_${r}'
# 	option name 'mark4_int_${r}'
# 	option dest 'ext'
# 	option ipset 'vpn4_${r}'
# 	option set_mark '0x1${mark}'
# 	option target 'MARK'
# 	list proto 'all'

config rule 'mark6_int_${r}'
	option name 'mark6_int_${r}'
	option dest 'ext'
	option ipset 'vpn6_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'
EOF
  domain="${r}"
  [[ ${r} == 'm' ]] && domain='main_nonexistent_domain'
  /usr/bin/env cat <<EOF >>etc/config/dhcp

config ipset 'vpn_${r}'
	list domain '${domain}'
	option table_family 'inet'
	list name 'vpn4_${r}'
	list name 'vpn6_${r}'
EOF
  echo "1${mark} vpn_${r}" >>etc/iproute2/rt_tables
done

/usr/bin/env cat <<EOF >>etc/config/firewall

config ipset 'tun2ray4'
	option name 'tun2ray4'
	option family 'ipv4'
	list match 'dst_net'

config ipset 'tun2ray6'
	option name 'tun2ray6'
	option family 'ipv6'
	list match 'dst_net'

config rule 'mark4_lan_tun2ray'
	option name 'mark4_lan_tun2ray'
	option src 'lan'
	option dest '*'
	option ipset 'tun2ray4'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_lan_tun2ray'
	option name 'mark6_lan_tun2ray'
	option src 'lan'
	option dest '*'
	option ipset 'tun2ray6'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'

config ipset 'byp4_m'
	option name 'byp4_m'
	option family 'ipv4'
	list match 'src_net'
	option loadfile '/etc/nftsets/byp4_m.txt'

config ipset 'byp6_m'
	option name 'byp6_m'
	option family 'ipv6'
	list match 'src_net'
	option loadfile '/etc/nftsets/byp6_m.txt'

config rule 'mark4_byp_m'
	option name 'mark4_byp_m'
	option src 'lan'
	option dest '*'
	option ipset 'byp4_m'
	option set_mark '0x199'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_byp_m'
	option name 'mark6_byp_m'
	option src 'lan'
	option dest '*'
	option ipset 'byp6_m'
	option set_mark '0x199'
	option target 'MARK'
	list proto 'all'

config ipset 'src4_m'
	option name 'src4_m'
	option family 'ipv4'
	list match 'src_net'
	option loadfile '/etc/nftsets/src4_m.txt'

config rule 'mark4_src_m'
	option name 'mark4_src_m'
	option src 'lan'
	option dest '*'
	option ipset 'src4_m'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'

config ipset 'prskt4'
	option name 'prskt4'
	option family 'ipv4'
	list match 'src_net'
	list match 'dest_net'
	option loadfile '/etc/nftsets/prskt4.txt'

config rule 'mark4_prskt'
	option name 'mark4_prskt'
	option src 'lan'
	option dest '*'
	option ipset 'prskt4'
	option set_mark '0x197'
	option target 'MARK'
	list proto 'all'
EOF

# resolf.conf
/usr/bin/env ls -la etc/resolv.conf
/usr/bin/env rm -fv etc/resolv.conf
/usr/bin/env cat <<EOF >>etc/resolv.conf
search lan local localdomain ${WRT_SECRET_TLD} home.${WRT_SECRET_TLD}
nameserver 127.0.0.1
nameserver ::1
EOF

# dhcp clients:
mac_list=''
# shellcheck disable=2086
IFS=',' read -ra array <<<"$(echo -n ${WRT_CLIENTS})"
for c in "${array[@]}"; do
  name="${c%@*}"
  name="${name#"${name%%[![:space:]]*}"}"
  name="${name%"${name##*[![:space:]]}"}"
  ident="${name//[^a-zA-Z0-9_]/_}"
  temp="${c#*@}"
  mac="${temp%#*}"
  mac="${mac#"${mac%%[![:space:]]*}"}"
  mac="${mac%"${mac##*[![:space:]]}"}"
  for m in ${mac}; do
    mac_list="${mac_list} ${m}"
	done
  num="${c##*#}"
  num="${num#"${num%%[![:space:]]*}"}"
  num="${num%"${num##*[![:space:]]}"}"
  echo "name: [${name}], mac: [${mac}], num: [${num}]"
  /usr/bin/env cat <<EOF >>etc/config/dhcp

config host '${ident}'
	option name '${name}'
	option ip '${WRT_LAN3OCT}.${num}'
	option hostid '${num}'
	option mac '${mac}'
	option dns '1'
	option leasetime 'infinite'
EOF
done

# fill mac list:
mac_filter=''
[[ "${WRT_WIFI_MAC_FILTER:-"null"}" = 'allow' ]] && {
  mac_filter="\toption macfilter 'allow'"
  for m in ${mac_list} ${WRT_WIFI_MAC_ADD:-}; do
    mac_filter="${mac_filter}\n\tlist maclist '${m}'"
	done
  mac_filter="${mac_filter}\n"
}
/usr/bin/env sed -i "s/REPLACE_mac_filter_REPLACE/${mac_filter}/g ;" \
  'etc/config/wireless'

# l2tp thru ipsec
[[ ${WRT_L2TP_LOGIN:-"null"} != 'null' &&
  ${WRT_L2TP_PASSWD:-"null"} != 'null' &&
  ${WRT_L2TP_SERVER:-"null"} != 'null' ]] && {
  /usr/bin/env cat <<EOF >>etc/config/network

config interface 'prskt'
	option proto 'l2tp'
	option server '${WRT_L2TP_SERVER}'
	option username '${WRT_L2TP_LOGIN}'
	option password '${WRT_L2TP_PASSWD}'
	option ip4table 'prskt'
	option ip6table 'prskt'
	option keepalive '5, 5'
	option disabled '0'
	option auto '1'
	option ipv6 '0'
EOF
}
[[ ${WRT_IPSEC_PSK:-"null"} != 'null' &&
  ${WRT_L2TP_SERVER:-"null"} != 'null' ]] && {
  /usr/bin/env cat <<EOF >etc/ipsec.conf
# ipsec config
config setup
	uniqueids=no
conn prskt
	authby=secret
	auto=start
	keyexchange=ikev1
	type=transport
	left=%defaultroute
	leftprotoport=17/%any
	right=${WRT_L2TP_SERVER}
	rightid=%any
	rightprotoport=17/1701
	dpddelay=22
	dpdtimeout=55
	dpdaction=restart
	keyingtries=0
	lifetime=9999s
	ikelifetime=11111s
EOF
  echo "%any ${WRT_L2TP_SERVER} : PSK '${WRT_IPSEC_PSK}'" >>etc/ipsec.secrets
}

# removing lan tag on wan port:
[[ ${WRT_LAN2WAN_TAG:-"null"} == 'null' ]] && /usr/bin/env sed \
  -i '/[[:space:]]*# lan tag on wan port$/d' 'etc/config/network'

# add domains list to acme:
if [[ ${WRT_ACME_STAR:-"null"} == 'null' ]]; then
  echo "	list domains '${WRT_HOSTNAME}.${WRT_SECRET_TLD}'" >>etc/config/acme
else
  /usr/bin/env cat <<EOF >>etc/config/acme
	list domains '${WRT_SECRET_TLD}'
	list domains '*.${WRT_SECRET_TLD}'
EOF
fi

# hide luci:
/usr/bin/env mv -vf 'www/cgi-bin' "www/luci-cgi-${WRT_LUCI_CGI}"
/usr/bin/env mv -vf 'www/luci-static' "www/luci-sta-${WRT_LUCI_STA}"
/usr/bin/env rm -vf 'www/'* 'etc/haproxy.cfg' 'etc/uci-defaults/60_nginx-luci-support' \
  etc/firewall.fail2ban etc/uci-defaults/99_fail2ban ||
  /usr/bin/env true
/usr/bin/env rm -vfr 'etc/nginx/conf.d'

# put build â„–:
[[ -z "${WRT_GREWIBU}" ]] && export WRT_GREWIBU='999'
echo "OPENWRT_GREWIBU='${WRT_GREWIBU}'" >>etc/os-release
/usr/bin/env sed -ri \
  "s/(.*OpenWrt\s+[0-9]+\..+\,\s+[0-9a-z\-]+)\s*/\1 gwb${WRT_GREWIBU}/" \
  etc/banner

# copy for observation
/usr/bin/env cp -r etc "/builder/bin/targets/${WRT_BOARD}"

#!/usr/bin/env bash
set -ueo pipefail
/usr/bin/env printf "\n\n----- build environment by env: -----"
/usr/bin/env
/usr/bin/env printf "\n\n----- starting configuration: -----\n:"
# shellcheck disable=1091
source "etc/secrets.sh"
rm -fv "etc/secrets.sh"

# shell:
/usr/bin/env sed -i -E 's#(root\:.+\:).+#\1/bin/bash#' etc/passwd

# password:
/usr/bin/env sed -i -E "s#(root\:)[^:]*(\:.+)#\1$(
  echo "${WRT_ROOT_PASSWD}" |
    /usr/bin/openssl passwd -6 -stdin
)\2#" etc/shadow

# crontab:
/usr/bin/env cat <<EOF >>etc/crontabs/root
*/20 * * * * /usr/bin/msmtpq --q-mgmt -r
1 0 * * * /etc/init.d/atop restart
EOF

# replace network 3 octets:
/usr/bin/env sed -i \
  "s/192.168.69/${WRT_LAN3OCT}/" \
	etc/config/network \
	etc/config/dhcp

/usr/bin/env sed -i \
  "
    s/REPLACE_hostname_REPLACE/${WRT_HOSTNAME}/ ;
    s/REPLACE_SMTP_host_REPLACE/${WRT_SMTP_HOST}/ ;
    s/REPLACE_SMTP_login_REPLACE/${WRT_SMTP_LOGIN}/ ;
    s/REPLACE_SMTP_passwd_REPLACE/${WRT_SMTP_PASSWD}/ ;
    s/REPLACE_secret_tld_REPLACE/${WRT_SECRET_TLD}/ ;
    s/REPLACE_authelia_jwt_secret_REPLACE/${WRT_AUTHELIA_JWT}/ ;
    s/REPLACE_insecure_session_secret_REPLACE/${WRT_AUTHELIA_SES}/ ;
    s/REPLACE_encryption_key_REPLACE/${WRT_AUTHELIA_DBKEY}/ ;
    s#REPLACE_couch_uri_REPLACE#${WRT_COUCH_URI}# ;
    s#ReplaceAutheliaUriSecretReplace#${WRT_AUTHELIA_URI}# ;
  " \
  'etc/fail2ban/filter.d/'*.local \
  etc/haproxy/haproxy.cfg \
  etc/dnsmasq.d/m.sets \
  etc/authelia.yaml

# add hotplug debug log:
# shellcheck disable=2016
/usr/bin/env find etc/hotplug.d etc/udhcpc.user.d \
  -mindepth 0 -maxdepth 1 -type d -exec bash -c '
etype="$(basename $1)"
[[ "${etype}" == "udhcpc.user.d" ]] && etype='\''udhcpc'\''
echo printenv to [${etype}]
cat > "$1/000-printenv.sh" <<EOF
#!/usr/bin/env bash
etype='\''${etype}'\''
/usr/bin/env logger -t "hotplug.\${etype}" "cmdline: [\$0 \$@]"
/usr/bin/env | /usr/bin/env logger -t "hotplug.\${etype}"
exit 0
EOF
chmod +x "$1/000-printenv.sh"
' _ {} \;

# authorized keys:
/usr/bin/env cp -v root/.ssh/authorized_keys etc/dropbear/authorized_keys
/usr/bin/env cp -v root/.terminfo/x/xterm-256color usr/share/terminfo/x/xterm-256color

# msmtp(q) preparation:
/usr/bin/env ln -vsf /root/log log
/usr/bin/env ln -vsf /root/.msmtp.queue .msmtp.queue
/usr/bin/env ln -vsf /usr/bin/msmtpq usr/sbin/sendmail

# patches:
for f in patches/*.diff; do
  patch -p0 <"${f}"
done
/usr/bin/env rm -rfv patches
/usr/bin/env cat etc/ssl/private/main.crt \
  etc/ssl/private/main.key > etc/ssl/private/main.pem

# system:
/usr/bin/env cat <<EOF >etc/config/system
config system 'main'
	option hostname '${WRT_HOSTNAME}'
	option timezone 'UTC'
	option ttylogin '0'
	option log_size '11111'
	option urandom_seed '0'
	option compat_version '1.1'
	option log_file '/var/log/system.log'
	option zonename 'UTC'
	option zram_comp_algo 'lz4'

config timeserver 'ntp'
	option enabled '1'
	option enable_server '0'
	list server '0.openwrt.pool.ntp.org'
	list server '1.openwrt.pool.ntp.org'
	list server '2.openwrt.pool.ntp.org'
	list server '3.openwrt.pool.ntp.org'
	list server '216.239.35.0'
	list server '216.239.35.4'
	list server '216.239.35.8'
	list server '216.239.35.12'
	list server '162.159.200.123'
	list server '162.159.200.1'
EOF

# uhttpd:
/usr/bin/env cat <<EOF >etc/config/uhttpd
config uhttpd 'main'
	option redirect_https '0'
	option home '/www'
	option rfc1918_filter '1'
	option max_requests '3'
	option max_connections '100'
	option cert '/etc/ssl/private/main.crt'
	option key '/etc/ssl/private/main.key'
	option cgi_prefix '/luci-cgi-${WRT_LUCI_CGI}'
	option lua_prefix '/luci-cgi-${WRT_LUCI_CGI}/luci=/usr/lib/lua/luci/sgi/uhttpd.lua'
	option script_timeout '60'
	option network_timeout '30'
	option http_keepalive '20'
	option tcp_keepalive '1'
	option ubus_prefix '/ubus'
	list listen_http '[::]:5080'
	list listen_http '0.0.0.0:5080'
	list listen_https '[::]:5443'
	list listen_https '0.0.0.0:5443'
	option no_dirlists '1'

config cert 'defaults'
	option days '11111'
	option key_type 'ec'
	option bits '2048'
	option ec_curve 'P-256'
	option country 'XY'
	option state 'Somewhere'
	option location 'Classified'
	option commonname 'Something'
	option organization 'Vendor'
EOF

# luci:
/usr/bin/env cat <<EOF >etc/config/luci
config core 'main'
	option lang 'auto'
	option mediaurlbase '/luci-sta-${WRT_LUCI_STA}/bootstrap'
	option resourcebase '/luci-sta-${WRT_LUCI_STA}/resources'
	option ubuspath '/ubus/'

config extern 'flash_keep'
	option uci '/etc/config/'
	option dropbear '/etc/dropbear/'
	option openvpn '/etc/openvpn/'
	option passwd '/etc/passwd'
	option opkg '/etc/opkg.conf'
	option firewall '/etc/firewall.user'
	option uploads '/lib/uci/upload/'

config internal 'languages'

config internal 'sauth'
	option sessionpath '/tmp/luci-sessions'
	option sessiontime '1111111'

config internal 'ccache'
	option enable '1'

config internal 'themes'
	option Bootstrap '/luci-sta-${WRT_LUCI_STA}/bootstrap'
	option BootstrapDark '/luci-sta-${WRT_LUCI_STA}/bootstrap-dark'
	option BootstrapLight '/luci-sta-${WRT_LUCI_STA}/bootstrap-light'

config internal 'apply'
	option rollback '90'
	option holdoff '4'
	option timeout '5'
	option display '1.5'

config internal 'diag'
	option dns 'openwrt.org'
	option ping 'openwrt.org'
	option route 'openwrt.org'
EOF

# ddns:
/usr/bin/env cat <<EOF >etc/config/ddns
config ddns 'global'
	option ddns_dateformat '%F %R'
	option ddns_loglines '250'
	option upd_privateip '1'
	option ddns_rundir '/var/run/ddns'
	option ddns_logdir '/var/log/ddns'

config service 'cloudflare'
	option service_name 'cloudflare.com-v4'
	option lookup_host '${WRT_HOSTNAME}.${WRT_SECRET_TLD}'
	option domain '${WRT_HOSTNAME}@${WRT_SECRET_TLD}'
	option username 'Bearer'
	option password '${WRT_CLOFA_TO}'
	option interface 'wan4'
	option ip_source 'network'
	option ip_network 'wan4'
	option enabled '1'
	option use_ipv6 '0'
	option use_syslog '1'
	option check_unit 'minutes'
	option force_unit 'hours'
	option retry_unit 'seconds'
	option use_logfile '0'
	option check_interval '11'
	option force_interval '33'
	option retry_interval '22'
EOF

# acme:
/usr/bin/env cat <<EOF >etc/config/acme
config acme 'main'
	option account_email 'r@${WRT_SECRET_TLD}'
	option debug '0'

config cert 'supasta'
	option enabled '1'
	option use_staging '0'
	option keylength 'ec-384'
	option validation_method 'dns'
	option dns 'dns_cf'
	option acme_server 'letsencrypt'
	list domains '${WRT_SECRET_TLD}'
	list domains '*.${WRT_SECRET_TLD}'
	list credentials 'CF_Zone_ID="${WRT_CLOFA_ZO}"'
	list credentials 'CF_Token="${WRT_CLOFA_TO}"'
EOF

# msmtprc:
/usr/bin/env cat <<EOF >etc/msmtprc
# msmtp relay config
account default
host ${WRT_SMTP_HOST}
auth on
user ${WRT_SMTP_LOGIN}
password ${WRT_SMTP_PASSWD}
domain ${WRT_HOSTNAME}.${WRT_SECRET_TLD}
port 25
tls on
tls_starttls on
tls_certcheck off
from %U@${WRT_HOSTNAME}.${WRT_SECRET_TLD}
allow_from_override on
set_from_header on
syslog LOG_MAIL
EOF

# dokodemo warp:
warp_reg='/usr/bin/warp-reg'
/usr/bin/env curl -Lm 111 -o "${warp_reg}" \
  https://github.com/badafans/warp-reg/releases/download/v1.0/main-linux-amd64
/usr/bin/env chmod -v 755 "${warp_reg}"
reg_data="$(${warp_reg})"
pvk="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="private_key:") print $2 }'
)"
ipv4="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="v4:") print $2 }'
)"
ipv6="$(
  # shellcheck disable=2016
  /usr/bin/env printf "%s\n" "${reg_data}" |
    /usr/bin/env awk '{ if ($1=="v6:") print $2 }'
)"
if [[ -z "${pvk}" ]]; then
  echo 'warp-reg failedâ€¦'
  exit 1
fi
echo "ips v4[${ipv4}] v6[${ipv6}] generated"
warp_regions='tr cy kz ge de us ng cl bg it ar uy se nl cz m'
for r in ${warp_regions}; do
  /usr/bin/env cat <<EOF >>etc/config/firewall
	list network 'wgcf${r}'
EOF
done
count=0
mtu='1300'
for r in ${warp_regions}; do
  count=$((count + 1))
  [[ "$r" == "m" ]] && count=0 && mtu='1420'
  [[ -e "etc/nftsets/vpn4_${r}.txt" ]] ||
    /usr/bin/env cat <<EOF >>"etc/nftsets/vpn4_${r}.txt"
# address blocks for [${r}] vpn region
EOF
  [[ -e "etc/nftsets/vpn6_${r}.txt" ]] ||
    /usr/bin/env cat <<EOF >>"etc/nftsets/vpn6_${r}.txt"
# address blocks for [${r}] vpn region
EOF
  port="$(/usr/bin/env printf '%03d' "$count")"
  mark="$(/usr/bin/env printf '%02d' "$count")"
  /usr/bin/env cat <<EOF >>etc/config/network

config interface 'wgcf${r}'
	option proto 'wireguard'
	option private_key '${pvk}'
	list addresses '172.16.0.2/32'
	list addresses '${ipv6}/128'
	option listen_port '12${port}'
	option mtu '${mtu}'

config wireguard_wgcf${r} 'wgserver${r}'
	option description 'warp-${r}'
	option public_key 'bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo='
	option endpoint_host '127.0.0.1'
	option endpoint_port '11${port}'
	option persistent_keepalive '11'
	option route_allowed_ips '0'
	list allowed_ips '0.0.0.0/0'
	list allowed_ips '::/0'

config rule 'wgcf4ru_${r}'
	option name 'mark-${r}'
	option mark '0x1${mark}'
	option priority '100'
	option lookup 'vpn_${r}'

config route 'wgcf4ro_${r}'
	option name 'wgcf-${r}'
	option interface 'wgcf${r}'
	option table 'vpn_${r}'
	option target '0.0.0.0/0'

config rule6 'wgcf6ru_${r}'
	option name 'mark-${r}'
	option mark '0x1${mark}'
	option priority '100'
	option lookup 'vpn_${r}'

config route6 'wgcf6ro_${r}'
	option name 'wgcf-${r}'
	option interface 'wgcf${r}'
	option table 'vpn_${r}'
	option target '::/0'
EOF
  /usr/bin/env cat <<EOF >>etc/config/firewall

config ipset 'vpn4_${r}'
	option name 'vpn4_${r}'
	option family 'ipv4'
	list match 'dst_net'
	option loadfile '/etc/nftsets/vpn4_${r}.txt'

config ipset 'vpn6_${r}'
	option name 'vpn6_${r}'
	option family 'ipv6'
	list match 'dst_net'
	option loadfile '/etc/nftsets/vpn6_${r}.txt'

config rule 'mark4_lan_${r}'
	option name 'mark4_lan_${r}'
	option src 'lan'
	option dest '*'
	option ipset 'vpn4_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_lan_${r}'
	option name 'mark6_lan_${r}'
	option src 'lan'
	option dest '*'
	option ipset 'vpn6_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'

config rule 'mark4_int_${r}'
	option name 'mark4_int_${r}'
	option dest 'ext'
	option ipset 'vpn4_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_int_${r}'
	option name 'mark6_int_${r}'
	option dest 'ext'
	option ipset 'vpn6_${r}'
	option set_mark '0x1${mark}'
	option target 'MARK'
	list proto 'all'
EOF
  domain="${r}"
	[[ ${r} == 'm' ]] && domain='main_nonexistent_domain'
	/usr/bin/env cat <<EOF >>etc/config/dhcp

config ipset 'vpn_${r}'
	list domain '${domain}'
	option table_family 'inet'
	list name 'vpn4_${r}'
	list name 'vpn6_${r}'
	# list name 'tun2ray4'
	# list name 'tun2ray6'
	# list name 'tproxy4'
	# list name 'tproxy6'
EOF
done
  /usr/bin/env cat <<EOF >>etc/config/firewall

config ipset 'tun2ray4'
	option name 'tun2ray4'
	option family 'ipv4'
	list match 'dst_net'
	# option loadfile '/etc/nftsets/vpn4_m.txt'

config ipset 'tun2ray6'
	option name 'tun2ray6'
	option family 'ipv6'
	list match 'dst_net'
	# option loadfile '/etc/nftsets/vpn6_m.txt'

config rule 'mark4_lan_tun2ray'
	option name 'mark4_lan_tun2ray'
	option src 'lan'
	option dest '*'
	option ipset 'tun2ray4'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_lan_tun2ray'
	option name 'mark6_lan_tun2ray'
	option src 'lan'
	option dest '*'
	option ipset 'tun2ray6'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'

config ipset 'byp4_m'
	option name 'byp4_m'
	option family 'ipv4'
	list match 'src_net'
	option loadfile '/etc/nftsets/byp4_m.txt'

config ipset 'byp6_m'
	option name 'byp6_m'
	option family 'ipv6'
	list match 'src_net'
	option loadfile '/etc/nftsets/byp6_m.txt'

config rule 'mark4_byp_m'
	option name 'mark4_byp_m'
	option src 'lan'
	option dest '*'
	option ipset 'byp4_m'
	option set_mark '0x199'
	option target 'MARK'
	list proto 'all'

config rule 'mark6_byp_m'
	option name 'mark6_byp_m'
	option src 'lan'
	option dest '*'
	option ipset 'byp6_m'
	option set_mark '0x199'
	option target 'MARK'
	list proto 'all'

config ipset 'src4_m'
	option name 'src4_m'
	option family 'ipv4'
	list match 'src_net'
	option loadfile '/etc/nftsets/src4_m.txt'

config rule 'mark4_src_m'
	option name 'mark4_src_m'
	option src 'lan'
	option dest '*'
	option ipset 'src4_m'
	option set_mark '0x100'
	option target 'MARK'
	list proto 'all'
EOF

# resolf.conf
  /usr/bin/env ls -la etc/resolv.conf
	/usr/bin/env rm -fv etc/resolv.conf
  /usr/bin/env cat <<EOF >>etc/resolv.conf
search lan local localdomain ${WRT_SECRET_TLD} home.${WRT_SECRET_TLD}
nameserver 127.0.0.1
nameserver ::1
EOF

  /usr/bin/env cat <<EOF >>etc/config/wireless

config wifi-device 'radio0'
	option type 'mac80211'
	option path 'platform/soc/18000000.wifi'
	option channel 'auto'
	option band '2g'
	option htmode 'HE20'
	option cell_density '0'

config wifi-iface 'default_radio0'
	option device 'radio0'
	option network 'lan'
	option mode 'ap'
	option ssid '${WRT_WIFI_SSID}2'
	option encryption 'sae-mixed'
	option key '${WRT_WIFI_KEY}'

config wifi-device 'radio1'
	option type 'mac80211'
	option path 'platform/soc/18000000.wifi+1'
	option channel 'auto'
	option band '5g'
	option htmode 'HE40'
	option cell_density '0'

config wifi-iface 'default_radio1'
	option device 'radio1'
	option network 'lan'
	option mode 'ap'
	option ssid '${WRT_WIFI_SSID}5'
	option encryption 'sae-mixed'
	option key '${WRT_WIFI_KEY}'
EOF

# shellcheck disable=2086
IFS=',' read -ra array <<< "$(echo -n ${WRT_CLIENTS})"
for c in "${array[@]}"; do
  name="${c%@*}"
  name="${name#"${name%%[![:space:]]*}"}"
  name="${name%"${name##*[![:space:]]}"}"
  temp="${c#*@}"
  mac="${temp%#*}"
  mac="${mac#"${mac%%[![:space:]]*}"}"
  mac="${mac%"${mac##*[![:space:]]}"}"
  num="${c##*#}"
  num="${num#"${num%%[![:space:]]*}"}"
  num="${num%"${num##*[![:space:]]}"}"
  echo "name: [${name}], mac: [${mac}], num: [${num}]"
	/usr/bin/env cat <<EOF >>etc/config/dhcp

config host
	option name '${name}'
	option ip '${WRT_LAN3OCT}.${num}'
	option mac '${mac}'
	option dns '1'
	option leasetime 'infinite'
EOF
done

# hide luci:
/usr/bin/env mv -vf 'www/cgi-bin' "www/luci-cgi-${WRT_LUCI_CGI}"
/usr/bin/env mv -vf 'www/luci-static' "www/luci-sta-${WRT_LUCI_STA}"
/usr/bin/env rm -vf 'www/'* 'etc/haproxy.cfg' 'etc/uci-defaults/60_nginx-luci-support' ||
  /usr/bin/env true
/usr/bin/env rm -vfr 'etc/nginx/conf.d'

# put build â„–:
[[ -z "${WRT_GREWIBU}" ]] && export WRT_GREWIBU='999'
echo "OPENWRT_GREWIBU='${WRT_GREWIBU}'" >>etc/os-release
/usr/bin/env sed -ri \
  "s/(.*OpenWrt\s+[0-9]+\..+\,\s+[0-9a-z\-]+)\s*/\1 gwb${WRT_GREWIBU}/" \
  etc/banner

# copy for observation
cp -rv etc /builder/bin/targets/mediatek/filogic
